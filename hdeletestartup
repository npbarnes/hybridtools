#!/usr/bin/python
import os
import sys
from filesize import dir_size, human_size
from FortranFile import FortranFile, IntegrityError

print "This operation will delete data."
print "Are you sure you want to do this? (yes/no)"
answer = raw_input()
if answer != 'yes':
    print "exiting"
    sys.exit()

print "Working..."

def safe_overwrite(original, replacement, tmp_path):
    os.rename(original, tmp_path)
    os.rename(replacement, original)
    os.remove(tmp_path)


cwd = os.getcwd()

grid_dir = os.path.join(cwd,'databig','grid')
part_dir = os.path.join(cwd,'databig','particle')

before_size = dir_size(grid_dir) + dir_size(part_dir)

def get_last_step_and_data(filename):
    with FortranFile(filename) as f:
        f.seek(0, os.SEEK_END)
        data = f.readBackRecord()
        step = f.readBackRecord()
    return step, data

for directory in [grid_dir, part_dir]:
    for filename in os.listdir(directory):
        if filename.startswith('c.') and filename.endswith('.dat') and 'outflowing' not in filename:
            original = os.path.join(directory, filename)
            tmp_new = os.path.join(directory, filename+'#')
            tmp_old = os.path.join(directory, filename+'~')

            # Get the last timestep from non-empty files
            if os.path.getsize(original) != 0:
                try:
                    step, data = get_last_step_and_data(original)
                except IntegrityError:
                    with FortranFile(original, mode='r+') as f:
                        f.repair()
                    step, data = get_last_step_and_data(original)

                # Safely overwrite the original with just the records from the last timestep
                with FortranFile(tmp_new, mode='w') as f:
                    f.writeRecord(step)
                    f.writeRecord(data)
                safe_overwrite(original, tmp_new, tmp_old)

after_size = dir_size(grid_dir) + dir_size(part_dir)
saved = before_size - after_size


print "You saved " + human_size(saved)
