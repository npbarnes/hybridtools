#!/usr/bin/env python
import numpy as np
from HybridReader2 import HybridReader2 as hr
from HybridHelper import parser, gen_plot
import matplotlib.pyplot as plt

def var_sanity_check(isScalar, coord):
    if h.isScalar and args.variable.coordinate is not None:
        raise ValueError("Don't specify a coordinate for scalars.")
    if not h.isScalar and args.variable.coordinate is None:
        raise ValueError("Must specify a coordinate for vectors.")

parser.add_argument('-s','--step', dest='stepnum', type=int, default=-1, help='The specific step number to read')
args = parser.parse_args()

if args.variable.name == 'beta':
    hn = hr(args.prefix, 'np')
    para = hn.para
    n = hn.get_timestep(args.stepnum)[-1]
    T = hr(args.prefix, 'temp_p').get_timestep(args.stepnum)[-1]
    B = hr(args.prefix, 'bt').get_timestep(args.stepnum)[-1]

    # Convert units
    n = n/(1000.0**3)                    # 1/km^3 -> 1/m^3
    T = 1.60218e-19 * T                  # eV -> J
    B = 1.6726219e-27/1.60217662e-19 * B # proton gyrofrequency -> T

    # Compute B \cdot B
    B2 = np.sum(B**2, axis=-1)

    data = n*T/(B2/(2*1.257e-6))
elif args.variable.name == 'bmag':
    hb = hr(args.prefix, 'bt')
    para = hb.para
    B = hb.get_timestep(args.stepnum)[-1]
    B = 1.6726219e-27/1.60217662e-19 * B # proton gyrofrequency -> T
    Bmag = np.sqrt(np.sum(B**2, axis=-1))
    data = Bmag
elif args.variable.name == 'fmach':
    hn = hr(args.prefix, 'np')
    para = hn.para
    n = hn.get_timestep(args.stepnum)[-1]
    T = hr(args.prefix, 'temp_p').get_timestep(args.stepnum)[-1]
    B = hr(args.prefix, 'bt').get_timestep(args.stepnum)[-1]
    u = hr(args.prefix, 'up').get_timestep(args.stepnum)[-1]
    ux = -u[:,:,:,0]

    n = n/(1000.0**3)                    # 1/km^3 -> 1/m^3
    T = 1.60218e-19 * T                  # eV -> J
    B = 1.6726219e-27/1.60217662e-19 * B # proton gyrofrequency -> T

    B2 = np.sum(B**2, axis=-1)

    c   = 3e8       # m/s
    mu0 = 1.257e-6  # H/m
    mp  = 1.602e-19 # kg
    gamma = 3

    # Upstream alfven velocity
    us_va = np.sqrt(B2[-1,0,0]/(mu0*mp*n[-1,0,0]))

    # Upstream ion acousitic speed
    us_vs = np.sqrt(gamma*T[-1,0,0]/mp)

    # Upstream fastmode velocity
    us_vf = c*np.sqrt((us_vs**2 + us_va**2)/(c**2 + us_va**2))

    data = ux/us_vf

elif args.variable.name == 'special':
    hn = hr(args.prefix, 'np')
    para = hn.para
    n = hn.get_timestep(args.stepnum)[-1]
    T = hr(args.prefix, 'temp_p').get_timestep(args.stepnum)[-1]
    B = hr(args.prefix, 'bt').get_timestep(args.stepnum)[-1]

    # Convert units
    n = n/(1000.0**3)                    # 1/km^3 -> 1/m^3
    TJ = 1.60218e-19 * T                  # eV -> J
    B = 1.6726219e-27/1.60217662e-19 * B # proton gyrofrequency -> T

    # Compute B \cdot B
    B2 = np.sum(B**2, axis=-1)

    #data = n*T/(B2/(2*1.257e-6))
    data = T
else:
    h = hr(args.prefix,args.variable.name)
    var_sanity_check(h.isScalar, args.variable.coordinate)

    data = h.get_timestep(args.stepnum)[-1]
    if not h.isScalar:
        data = data[:,:,:,args.variable.coordinate]
    para = h.para


fig, (ax1, ax2) = plt.subplots(1, 2, sharex=True, sharey=True)
ax1.set_aspect('equal', adjustable='box-forced')
ax2.set_aspect('equal', adjustable='box-forced')

# Make X-Y plot
gen_plot(fig, ax1, data, para, 'xy', cmap=args.colormap, norm=args.norm, cax='None', vmin=args.vmin, vmax=args.vmax)

# Make X-Z plot
gen_plot(fig, ax2, data, para, 'xz', cmap=args.colormap, norm=args.norm, vmin=args.vmin, vmax=args.vmax)

fig.suptitle(args.variable, fontsize=14)

if args.save:
    if args.save is True:
        fig.savefig(str(args.variable)+'.png', bbox_inches='tight')
    else:
        fig.savefig(args.save, bbox_inches='tight')
else:
    plt.show()
