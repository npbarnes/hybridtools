#!/usr/bin/python
import numpy as np
from HybridReader2 import HybridReader2 as hr
from HybridHelper import parser, get_pluto_coords
import matplotlib.pyplot as plt
import matplotlib.ticker as plticker
from matplotlib.colors import Normalize, SymLogNorm, LogNorm
import colormaps as cmaps
plt.register_cmap(name='viridis', cmap=cmaps.viridis)
plt.register_cmap(name='plasma', cmap=cmaps.plasma)
from sys import argv
from bisect import bisect
import argparse

parser.add_argument('-s','--step', dest='stepnum', type=int, default=-1, help='The specific step number to read')
args = parser.parse_args()

h = hr(args.prefix,args.variable)

if h.isScalar and args.variable.coordinate is not None:
    raise ValueError("Don't specify a coordinate for scalars.")
if not h.isScalar and args.variable.coordinate is None:
    raise ValueError("Must specify a coordinate for vectors.")

data = h.get_timestep(args.stepnum)[-1]
if not h.isScalar:
    data = data[:,:,:,args.variable.coordinate]

def gen_plot(fig, ax, direction, depth=None):
    infodict = get_pluto_coords(h)
    if direction == 'xy':
        depth = depth if depth is not None else infodict['cz']
        dslice = data[:,:,depth]
        x,y = infodict['px'], infodict['py']
        ax.set_xlabel('X ($R_p$)')
        ax.set_ylabel('Y ($R_p$)')

    elif direction == 'xz':
        depth = depth if depth is not None else infodict['cy']
        dslice = data[:,depth,:]
        x,y = infodict['px'], infodict['pz']
        ax.set_xlabel('X ($R_p$)')
        ax.set_ylabel('Z ($R_p$)')

    elif direction == 'yz':
        depth = depth if depth is not None else infodict['cx']
        dslice = data[depth,:,:]
        x,y = infodict['py'], infodict['pz']
        ax.set_xlabel('Y ($R_p$)')
        ax.set_ylabel('Z ($R_p$)')

    else:
        raise ValueError("direction must be one of 'xy', 'xz', or 'yz'")
    
    X,Y = np.meshgrid(x, y)
    mappable = ax.pcolormesh(X,Y,dslice.transpose(), cmap=args.colormap, norm=args.norm)
    fig.colorbar(mappable, ax=ax)
    ax.set_xlim(x[0],x[-1])
    ax.set_ylim(y[0],y[-1])
    ax.set_title(args.variable)

    ax.set_aspect('equal') # equal aspect ratio

# Make X-Y plot
fig = plt.figure()
ax  = fig.add_subplot(1,1,1)
gen_plot(fig, ax, 'xy')

# Make X-Z plot
fig = plt.figure()
ax  = fig.add_subplot(1,1,1)
gen_plot(fig, ax, 'xz')

plt.show()
